// ÂõæÊ†áÁÆ°ÁêÜÂô® - Ë¥üË¥£Á≥ªÁªüÂõæÊ†áËé∑ÂèñÂíåÁºìÂ≠ò
const { app, nativeImage } = require('electron');
const path = require('path');
const fs = require('fs').promises;

class IconManager {
  constructor() {
    this.cache = new Map();
    this.maxCacheSize = 50; // ÊúÄÂ§ßÁºìÂ≠ò50‰∏™ÂõæÊ†á
    this.pendingRequests = new Map(); // Èò≤Ê≠¢ÈáçÂ§çËØ∑Ê±Ç
  }

  // Ëé∑ÂèñÊñá‰ª∂ÂõæÊ†áÔºà‰∏ªË¶ÅÂÖ•Âè£Ôºâ
  async getFileIcon(filePath) {
    if (!filePath || typeof filePath !== 'string') {
      return this.getDefaultIcon('unknown');
    }

    // Ê£ÄÊü•ÊòØÂê¶‰∏∫Êñá‰ª∂Â§π - Áõ¥Êé•‰ΩøÁî®ÈªòËÆ§ÂõæÊ†á
    if (await this.isDirectory(filePath)) {
      return this.getDefaultIcon('folder');
    }

    const ext = this.getFileExtension(filePath);
    const cacheKey = ext || 'no-ext';

    // Ê£ÄÊü•ÁºìÂ≠ò
    if (this.cache.has(cacheKey)) {
      return this.cache.get(cacheKey);
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊúâÊ≠£Âú®ËøõË°åÁöÑËØ∑Ê±Ç
    if (this.pendingRequests.has(cacheKey)) {
      return this.pendingRequests.get(cacheKey);
    }

    // ÂàõÂª∫Êñ∞ÁöÑËØ∑Ê±Ç
    const iconPromise = this.fetchSystemIcon(filePath, ext);
    this.pendingRequests.set(cacheKey, iconPromise);

    try {
      const iconData = await iconPromise;
      
      // ÁºìÂ≠òÂõæÊ†á
      this.setCachedIcon(cacheKey, iconData);
      
      return iconData;
    } catch (error) {
      console.error('Ëé∑ÂèñÁ≥ªÁªüÂõæÊ†áÂ§±Ë¥•:', error);
      // ËøîÂõûÈªòËÆ§ÂõæÊ†á
      const category = ext === 'lnk' ? 'shortcut' : this.detectFileCategory(ext);
      const defaultIcon = this.getDefaultIcon(category);
      this.setCachedIcon(cacheKey, defaultIcon);
      return defaultIcon;
    } finally {
      this.pendingRequests.delete(cacheKey);
    }
  }

  // Ëé∑ÂèñÁ≥ªÁªüÂõæÊ†á
  async fetchSystemIcon(filePath, ext) {
    try {
      // WindowsÂπ≥Âè∞‰ºòÂÖàÂ§ÑÁêÜ
      if (process.platform === 'win32') {
        return await this.getWindowsIcon(filePath, ext);
      } else if (process.platform === 'darwin') {
        return await this.getMacIcon(filePath, ext);
      } else {
        return await this.getLinuxIcon(filePath, ext);
      }
    } catch (error) {
      console.error(`Ëé∑Âèñ${process.platform}Á≥ªÁªüÂõæÊ†áÂ§±Ë¥•:`, error);
      throw error;
    }
  }

  // WindowsÂõæÊ†áËé∑Âèñ
  async getWindowsIcon(filePath, ext) {
    try {
      // Áõ¥Êé•Â∞ùËØïËé∑ÂèñÊñá‰ª∂ÂõæÊ†áÔºàÂåÖÊã¨.lnkÊñá‰ª∂Ôºâ
      if (await this.fileExists(filePath)) {
        const icon = await app.getFileIcon(filePath, { size: 'normal' });
        if (icon && !icon.isEmpty()) {
          return {
            type: 'native',
            data: icon.toDataURL(),
            size: { width: 36, height: 36 }
          };
        }
      }

      // ÈÄöËøáÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂Ëé∑ÂèñÊâ©Â±ïÂêçÂõæÊ†á
      if (ext) {
        const tempFileName = `temp_icon_file.${ext}`;
        const tempPath = path.join(app.getPath('temp'), tempFileName);
        
        try {
          await fs.writeFile(tempPath, '');
          const icon = await app.getFileIcon(tempPath, { size: 'normal' });
          
          // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          try {
            await fs.unlink(tempPath);
          } catch {}

          if (icon && !icon.isEmpty()) {
            return {
              type: 'native',
              data: icon.toDataURL(),
              size: { width: 32, height: 32 }
            };
          }
        } catch (tempError) {
          console.warn('‰∏¥Êó∂Êñá‰ª∂ÊñπÊ≥ïÂ§±Ë¥•:', tempError);
        }
      }

      throw new Error('Êó†Ê≥ïËé∑ÂèñWindowsÂõæÊ†á');
    } catch (error) {
      throw new Error(`WindowsÂõæÊ†áËé∑ÂèñÂ§±Ë¥•: ${error.message}`);
    }
  }

  // macOSÂõæÊ†áËé∑Âèñ
  async getMacIcon(filePath, ext) {
    try {
      // macOS‰ΩøÁî®app.getFileIcon
      if (await this.fileExists(filePath)) {
        const icon = await app.getFileIcon(filePath, { size: 'normal' });
        if (icon && !icon.isEmpty()) {
          return {
            type: 'native',
            data: icon.toDataURL(),
            size: { width: 32, height: 32 }
          };
        }
      }

      throw new Error('Êó†Ê≥ïËé∑ÂèñmacOSÂõæÊ†á');
    } catch (error) {
      throw new Error(`macOSÂõæÊ†áËé∑ÂèñÂ§±Ë¥•: ${error.message}`);
    }
  }

  // LinuxÂõæÊ†áËé∑Âèñ
  async getLinuxIcon(filePath, ext) {
    try {
      // LinuxÂπ≥Âè∞ÁöÑÂõæÊ†áËé∑ÂèñÊØîËæÉÂ§çÊùÇÔºåÊöÇÊó∂ËøîÂõûÈªòËÆ§ÂõæÊ†á
      // TODO: ÂÆûÁé∞LinuxÂõæÊ†á‰∏ªÈ¢òÊîØÊåÅ
      throw new Error('LinuxÂõæÊ†áËé∑ÂèñÊöÇÊú™ÂÆûÁé∞');
    } catch (error) {
      throw new Error(`LinuxÂõæÊ†áËé∑ÂèñÂ§±Ë¥•: ${error.message}`);
    }
  }

  // Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
  async fileExists(filePath) {
    try {
      await fs.access(filePath);
      return true;
    } catch {
      return false;
    }
  }

  // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÁõÆÂΩï
  async isDirectory(filePath) {
    try {
      const stats = await fs.stat(filePath);
      return stats.isDirectory();
    } catch {
      return false;
    }
  }

  // Ëé∑ÂèñÈªòËÆ§ÂõæÊ†áÔºàUnicode EmojiÔºâ
  getDefaultIcon(category) {
    const defaultIcons = {
      document: 'üìÑ',
      spreadsheet: 'üìä', 
      presentation: 'üìΩÔ∏è',
      archive: 'üóúÔ∏è',
      image: 'üñºÔ∏è',
      video: 'üé¨',
      audio: 'üéµ',
      code: 'üíª',
      data: 'üìã',
      executable: '‚öôÔ∏è',
      font: 'üî§',
      folder: 'üìÅ',
      shortcut: 'üîó',
      unknown: 'üìÑ'
    };

    const icon = defaultIcons[category] || defaultIcons.unknown;
    
    return {
      type: 'emoji',
      data: icon,
      size: { width: 16, height: 16 }
    };
  }

  // ÁºìÂ≠òÂõæÊ†á
  setCachedIcon(key, iconData) {
    // Â¶ÇÊûúÁºìÂ≠òÂ∑≤Êª°ÔºåÂà†Èô§ÊúÄÊóßÁöÑÈ°π
    if (this.cache.size >= this.maxCacheSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }

    this.cache.set(key, iconData);
  }

  // Ê∏ÖÈô§ÁºìÂ≠ò
  clearCache() {
    this.cache.clear();
    this.pendingRequests.clear();
  }

  // Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°
  getCacheStats() {
    return {
      size: this.cache.size,
      maxSize: this.maxCacheSize,
      keys: Array.from(this.cache.keys())
    };
  }

  // Â∑•ÂÖ∑ÊñπÊ≥ï
  getFileExtension(filePath) {
    const match = filePath.match(/\.([a-zA-Z0-9]+)$/i);
    return match ? match[1].toLowerCase() : '';
  }

  detectFileCategory(ext) {
    // ÁâπÊÆäÊñá‰ª∂Á±ªÂûã
    if (ext === 'lnk') return 'shortcut';
    
    const fileTypes = {
      document: ['doc', 'docx', 'pdf', 'txt', 'rtf', 'odt', 'pages'],
      spreadsheet: ['xls', 'xlsx', 'csv', 'ods', 'numbers'],
      presentation: ['ppt', 'pptx', 'odp', 'key'],
      archive: ['zip', 'rar', '7z', 'tar', 'gz', 'bz2'],
      image: ['jpg', 'jpeg', 'png', 'gif', 'svg', 'bmp', 'webp'],
      video: ['mp4', 'avi', 'mkv', 'mov', 'wmv', 'flv'],
      audio: ['mp3', 'wav', 'flac', 'aac', 'm4a', 'ogg'],
      code: ['js', 'ts', 'py', 'java', 'cpp', 'c', 'html', 'css'],
      data: ['json', 'xml', 'yaml', 'yml', 'toml', 'ini'],
      executable: ['exe', 'msi', 'dmg', 'pkg', 'deb', 'rpm'],
      font: ['ttf', 'otf', 'woff', 'woff2']
    };

    for (const [category, extensions] of Object.entries(fileTypes)) {
      if (extensions.includes(ext)) {
        return category;
      }
    }
    return 'unknown';
  }
}

module.exports = { IconManager };
